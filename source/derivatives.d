/*
    Module for flowfield derivative calculations in swft

    @author: Nick Gibbons
*/

module derivatives;

import std.stdio;
import std.math;
import std.format;
import std.string;
import std.conv;

import io;

import gas;
import nm.complex;
import nm.number;

double temp_from_u(GasState gs, GasModel gm){
/*
    This should copy the gasstate, so it won't affect the outer scope.
*/
    // Technically we use rho u in the increment calculation. Should that
    // be reflected here? Maybe it affects the error very slightly.
    gm.update_thermo_from_rhop(gs);
    return gs.T.re;
}

void f_derivative_nonuniform(Primitives P0, Primitives P1, ref const Primitives[] dP0dfj,
                             double f, double dA, ref Primitives[] dP1dfj,
                             double CH, double uw, double A0, double A, double dx, GasState gs, GasModel gm){

    double rho = P1.rho;
    double p = P1.p;
    double v = P1.v;
    double u = P1.u;

    double rho0 = P0.rho;
    double p0 = P0.p;
    double v0 = P0.v;
    double u0 = P0.u;

    gs.u = u;
    gs.rho = rho;
    gs.p = p;
    gs.T = temp_from_u(gs, gm);
    double r = sqrt(0.71); // TODO We could compute this from the gas model.

    double diameter = sqrt(4.0*A0/PI);
    double c = 1.0/8.0*PI*diameter*dx;

    double cv = gm.dudT_const_v(gs).re;
    double R = gm.gas_constant(gs).re;
    
    size_t nj = dP0dfj.length;
    foreach(j; 0 .. nj){
        // Oh God. Yeah.
        double dr0dfj= dP0dfj[j].rho;
        double dv0dfj= dP0dfj[j].v;
        double dp0dfj= dP0dfj[j].p;
        double du0dfj= dP0dfj[j].u;

        // Automatically generated by nonuniform_friction_derivs.max
        double rhs0 = A0*dr0dfj*v0+A0*dv0dfj*rho0;
        double rhs1 =
                     -((2*c*dr0dfj*f-2*A0*dr0dfj)*v0^^2+(4*c*dv0dfj*f-4*A0*dv0dfj)*rho0*v0
                                                      +((-dA)-2*A0)*dp0dfj)
                      /2;
        double rhs2 =
                     -(sqrt(A0*PI)*(2*CH*dr0dfj*dx*r*v0^^3+6*CH*dv0dfj*dx*r*rho0*v0^^2
                                                         +((-4*CH*dr0dfj*dx*uw)
                                                          +4*CH*dr0dfj*dx*u0
                                                          +4*CH*du0dfj*dx*rho0)
                                                          *v0-4*CH*dv0dfj*dx*rho0*uw
                                                         +4*CH*dv0dfj*dx*rho0*u0)
                      -A0*dr0dfj*v0^^3-3*A0*dv0dfj*rho0*v0^^2
                      +((-2*A0*dr0dfj*u0)-2*A0*du0dfj*rho0-2*A0*dp0dfj)*v0
                      -2*A0*dv0dfj*rho0*u0-2*A0*dv0dfj*p0)
                      /2;
        double rhs3 = 0;

        double dr1dfj =
                       ((3*R*dA+8*A*cv+2*A*R)*rho*rhs0*v^^2
                        +((-4*A*cv)-4*A*R)*rho*rhs1*v+(2*R*dA-4*A*R)*rho*rhs0*u
                        +(4*A*R-2*R*dA)*rho*rhs2+(2*R*dA-4*A*R)*p*rhs0)
                        /((2*A*R*dA+4*A^^2*cv)*rho*v^^3
                         +((2*A*R*dA-4*A^^2*R)*rho*u+(2*A*R*dA-4*A^^2*R)*p)*v);
        double dv1dfj =
                       -((R*dA+4*A*cv+2*A*R)*rhs0*v^^2+((-4*A*cv)-4*A*R)*rhs1*v
                                                     +(4*A*R-2*R*dA)*rhs2)
                        /((2*A*R*dA+4*A^^2*cv)*rho*v^^2+(2*A*R*dA-4*A^^2*R)*rho*u
                                                     +(2*A*R*dA-4*A^^2*R)*p);
        double dp1dfj =
                       (R*rho*rhs0*v^^3-2*R*rho*rhs1*v^^2
                                      +(2*R*rho*rhs0*u+2*R*rho*rhs2+2*R*p*rhs0)*v
                                      -2*R*rho*rhs1*u-2*R*p*rhs1)
                        /((R*dA+2*A*cv)*rho*v^^2+(R*dA-2*A*R)*rho*u+(R*dA-2*A*R)*p);
        double du1dfj =
                       (2*A*cv*rho*rhs0*v^^4-4*A*cv*rho*rhs1*v^^3
                                           +(((-3*R*dA)-4*A*cv-2*A*R)*rho*rhs0*u
                                            +4*A*cv*rho*rhs2+4*A*cv*p*rhs0)
                                            *v^^2+(4*A*R*rho*rhs1*u-4*A*cv*p*rhs1)*v
                                           +(4*A*R-2*R*dA)*rho*rhs0*u^^2
                                           +((2*R*dA-4*A*R)*rho*rhs2
                                            +(4*A*R-2*R*dA)*p*rhs0)
                                            *u)
                        /((2*A*R*dA+4*A^^2*cv)*rho^^2*v^^3
                         +((2*A*R*dA-4*A^^2*R)*rho^^2*u+(2*A*R*dA-4*A^^2*R)*p*rho)*v);

        dP1dfj ~= Primitives(dr1dfj, dp1dfj, dv1dfj, du1dfj);
    }

    // Okay so this is derivative of the current batch of primitves w.r.t to the
    // friction f in THIS cell, assuming that all of the other f's are zero
    double bot = (R*dA+2*A*cv)*rho*v^^2+(R*dA-2*A*R)*rho*u+(R*dA-2*A*R)*p;
    double dr1df0 = ((2*c*cv+2*R*c)*rho*rho0*v0^^2)/bot;
    double dv1df0 = -((2*c*cv+2*R*c)*rho0*v*v0^^2)/bot;
    double dp1df0 = ((2*R*c*rho*rho0*v^^2+2*R*c*rho*rho0*u+2*R*c*p*rho0)*v0^^2)/bot;
    double du1df0 =
                   ((2*c*cv*rho*rho0*v^^2-2*R*c*rho*rho0*u+2*c*cv*p*rho0)*v0^^2)
                    /((R*dA+2*A*cv)*rho^^2*v^^2+(R*dA-2*A*R)*rho^^2*u+(R*dA-2*A*R)*p*rho);

    dP1dfj ~= Primitives(dr1df0, dp1df0, dv1df0, du1df0);
}

Primitives H_derivative(Primitives P0, Primitives P1, Primitives dP0dH, double f,
         double Hdot, double CH, double uw, double dA,  double A0, double A1, double dx, GasState gs, GasModel gm){
    double rho = P1.rho;
    double p = P1.p;
    double v = P1.v;
    double u = P1.u;

    double rho0 = P0.rho;
    double p0 = P0.p;
    double v0 = P0.v;
    double u0 = P0.u;

    gs.u = u;
    gs.rho = rho;
    gs.p = p;
    gs.T = temp_from_u(gs, gm);
    double r = sqrt(0.71); // TODO We could compute this from the gas model.

    double diameter = sqrt(4.0*A0/PI);
    double c = 1.0/8.0*PI*diameter*dx;

    double cv = gm.dudT_const_v(gs).re;
    double R = gm.gas_constant(gs).re;
    double A = A1;

    double dr0dH = dP0dH.rho;
    double dv0dH = dP0dH.v;
    double dp0dH = dP0dH.p;
    double du0dH = dP0dH.u;

    // Automatically generated by heat_addition_derivative.max
    double rhs0 = A0*dr0dH*v0+A0*dv0dH*rho0;
    double rhs1 =
                 dr0dH*(A0*v0^^2-c*f*v0^^2)+dv0dH*(2*A0*rho0*v0-2*c*f*rho0*v0)
                                         +(dA/2+A0)*dp0dH;
    double rhs2 =
                 dr0dH*(A0*v0*(v0^^2/2+u0)
                       -2*CH*dx*sqrt(A0*PI)*v0*((r*v0^^2)/2-uw+u0))
                  +dv0dH*((-2*CH*dx*sqrt(A0*PI)*rho0*((r*v0^^2)/2-uw+u0))
                         -2*CH*dx*sqrt(A0*PI)*r*rho0*v0^^2+A0*rho0*v0^^2
                         +A0*rho0*(v0^^2/2+u0)+A0*p0)
                  +du0dH*(A0*rho0*v0-2*CH*dx*sqrt(A0*PI)*rho0*v0)+A0*dp0dH*v0
                  +A0*dx;
    double rhs3 = 0.0;

    double drdH =
                 ((3*R*dA+8*A*cv+2*A*R)*rho*rhs0*v^^2
                  +((-4*A*cv)-4*A*R)*rho*rhs1*v+(2*R*dA-4*A*R)*rho*rhs0*u
                  +(4*A*R-2*R*dA)*rho*rhs2+(2*R*dA-4*A*R)*p*rhs0)
                  /((2*A*R*dA+4*A^^2*cv)*rho*v^^3
                   +((2*A*R*dA-4*A^^2*R)*rho*u+(2*A*R*dA-4*A^^2*R)*p)*v);
    double dvdH =
                 -((R*dA+4*A*cv+2*A*R)*rhs0*v^^2+((-4*A*cv)-4*A*R)*rhs1*v
                                               +(4*A*R-2*R*dA)*rhs2)
                  /((2*A*R*dA+4*A^^2*cv)*rho*v^^2+(2*A*R*dA-4*A^^2*R)*rho*u
                                               +(2*A*R*dA-4*A^^2*R)*p);
    double dpdH =
                 (R*rho*rhs0*v^^3-2*R*rho*rhs1*v^^2
                                +(2*R*rho*rhs0*u+2*R*rho*rhs2+2*R*p*rhs0)*v
                                -2*R*rho*rhs1*u-2*R*p*rhs1)
                  /((R*dA+2*A*cv)*rho*v^^2+(R*dA-2*A*R)*rho*u+(R*dA-2*A*R)*p);

    double dudH =
                 (2*A*cv*rho*rhs0*v^^4-4*A*cv*rho*rhs1*v^^3
                                     +(((-3*R*dA)-4*A*cv-2*A*R)*rho*rhs0*u
                                      +4*A*cv*rho*rhs2+4*A*cv*p*rhs0)
                                      *v^^2+(4*A*R*rho*rhs1*u-4*A*cv*p*rhs1)*v
                                     +(4*A*R-2*R*dA)*rho*rhs0*u^^2
                                     +((2*R*dA-4*A*R)*rho*rhs2
                                      +(4*A*R-2*R*dA)*p*rhs0)
                                      *u)
                  /((2*A*R*dA+4*A^^2*cv)*rho^^2*v^^3
                   +((2*A*R*dA-4*A^^2*R)*rho^^2*u+(2*A*R*dA-4*A^^2*R)*p*rho)*v);
    return Primitives(drdH, dpdH, dvdH, dudH);
}

Primitives CH_derivative(Primitives P0, Primitives P1, Primitives dP0dCH, double f,
         double Hdot, double CH, double uw, double dA,  double A0, double A1, double dx, GasState gs, GasModel gm){
    double rho = P1.rho;
    double p = P1.p;
    double v = P1.v;
    double u = P1.u;

    double rho0 = P0.rho;
    double p0 = P0.p;
    double v0 = P0.v;
    double u0 = P0.u;

    gs.u = u;
    gs.rho = rho;
    gs.p = p;
    gs.T = temp_from_u(gs, gm);
    double r = sqrt(0.71); // TODO We could compute this from the gas model.

    double diameter = sqrt(4.0*A0/PI);
    double c = 1.0/8.0*PI*diameter*dx;

    double cv = gm.dudT_const_v(gs).re;
    double R = gm.gas_constant(gs).re;
    double A = A1;

    double dr0dCH = dP0dCH.rho;
    double dv0dCH = dP0dCH.v;
    double dp0dCH = dP0dCH.p;
    double du0dCH = dP0dCH.u;

    // Automatically generated by convection_derivative.max
    double rhs0 = A0*dr0dCH*v0+A0*dv0dCH*rho0;
    double rhs1 =
                 dr0dCH*(A0*v0^^2-c*f*v0^^2)+dv0dCH*(2*A0*rho0*v0-2*c*f*rho0*v0)
                                          +(dA/2+A0)*dp0dCH;
    double rhs2 =
                 dr0dCH*(A0*v0*(v0^^2/2+u0)
                        -2*CH*sqrt(A0*PI)*dx*v0*((r*v0^^2)/2-uw+u0))
                  +dv0dCH*((-2*CH*sqrt(A0*PI)*dx*rho0*((r*v0^^2)/2-uw+u0))
                          -2*CH*sqrt(A0*PI)*dx*r*rho0*v0^^2+A0*rho0*v0^^2
                          +A0*rho0*(v0^^2/2+u0)+A0*p0)
                  -2*sqrt(A0*PI)*dx*rho0*v0*((r*v0^^2)/2-uw+u0)
                  +du0dCH*(A0*rho0*v0-2*CH*sqrt(A0*PI)*dx*rho0*v0)
                  +A0*dp0dCH*v0;
    double rhs3 = 0.0;

    double drdCH =
                  ((3*R*dA+8*A*cv+2*A*R)*rho*rhs0*v^^2
                   +((-4*A*cv)-4*A*R)*rho*rhs1*v+(2*R*dA-4*A*R)*rho*rhs0*u
                   +(4*A*R-2*R*dA)*rho*rhs2+(2*R*dA-4*A*R)*p*rhs0)
                   /((2*A*R*dA+4*A^^2*cv)*rho*v^^3
                    +((2*A*R*dA-4*A^^2*R)*rho*u+(2*A*R*dA-4*A^^2*R)*p)*v);
    double dvdCH =
                  -((R*dA+4*A*cv+2*A*R)*rhs0*v^^2+((-4*A*cv)-4*A*R)*rhs1*v
                                                +(4*A*R-2*R*dA)*rhs2)
                   /((2*A*R*dA+4*A^^2*cv)*rho*v^^2+(2*A*R*dA-4*A^^2*R)*rho*u
                                                +(2*A*R*dA-4*A^^2*R)*p);
    double dpdCH =
                  (R*rho*rhs0*v^^3-2*R*rho*rhs1*v^^2
                                 +(2*R*rho*rhs0*u+2*R*rho*rhs2+2*R*p*rhs0)*v
                                 -2*R*rho*rhs1*u-2*R*p*rhs1)
                   /((R*dA+2*A*cv)*rho*v^^2+(R*dA-2*A*R)*rho*u+(R*dA-2*A*R)*p);
    double dudCH =
                  (2*A*cv*rho*rhs0*v^^4-4*A*cv*rho*rhs1*v^^3
                                      +(((-3*R*dA)-4*A*cv-2*A*R)*rho*rhs0*u
                                       +4*A*cv*rho*rhs2+4*A*cv*p*rhs0)
                                       *v^^2+(4*A*R*rho*rhs1*u-4*A*cv*p*rhs1)*v
                                      +(4*A*R-2*R*dA)*rho*rhs0*u^^2
                                      +((2*R*dA-4*A*R)*rho*rhs2
                                       +(4*A*R-2*R*dA)*p*rhs0)
                                       *u)
                   /((2*A*R*dA+4*A^^2*cv)*rho^^2*v^^3
                    +((2*A*R*dA-4*A^^2*R)*rho^^2*u+(2*A*R*dA-4*A^^2*R)*p*rho)*v);

    return Primitives(drdCH, dpdCH, dvdCH, dudCH);
}
